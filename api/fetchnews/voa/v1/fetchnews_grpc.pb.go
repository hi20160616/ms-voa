// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/hi20160616/fetchnews-api/proto/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FetchVOAClient is the client API for FetchVOA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchVOAClient interface {
	ListArticles(ctx context.Context, in *v1.ListArticlesRequest, opts ...grpc.CallOption) (*v1.ListArticlesResponse, error)
	GetArticle(ctx context.Context, in *v1.GetArticleRequest, opts ...grpc.CallOption) (*v1.Article, error)
	SearchArticles(ctx context.Context, in *v1.SearchArticlesRequest, opts ...grpc.CallOption) (*v1.SearchArticlesResponse, error)
}

type fetchVOAClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchVOAClient(cc grpc.ClientConnInterface) FetchVOAClient {
	return &fetchVOAClient{cc}
}

func (c *fetchVOAClient) ListArticles(ctx context.Context, in *v1.ListArticlesRequest, opts ...grpc.CallOption) (*v1.ListArticlesResponse, error) {
	out := new(v1.ListArticlesResponse)
	err := c.cc.Invoke(ctx, "/fetchnews.voa.v1.FetchVOA/ListArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchVOAClient) GetArticle(ctx context.Context, in *v1.GetArticleRequest, opts ...grpc.CallOption) (*v1.Article, error) {
	out := new(v1.Article)
	err := c.cc.Invoke(ctx, "/fetchnews.voa.v1.FetchVOA/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchVOAClient) SearchArticles(ctx context.Context, in *v1.SearchArticlesRequest, opts ...grpc.CallOption) (*v1.SearchArticlesResponse, error) {
	out := new(v1.SearchArticlesResponse)
	err := c.cc.Invoke(ctx, "/fetchnews.voa.v1.FetchVOA/SearchArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchVOAServer is the server API for FetchVOA service.
// All implementations must embed UnimplementedFetchVOAServer
// for forward compatibility
type FetchVOAServer interface {
	ListArticles(context.Context, *v1.ListArticlesRequest) (*v1.ListArticlesResponse, error)
	GetArticle(context.Context, *v1.GetArticleRequest) (*v1.Article, error)
	SearchArticles(context.Context, *v1.SearchArticlesRequest) (*v1.SearchArticlesResponse, error)
	mustEmbedUnimplementedFetchVOAServer()
}

// UnimplementedFetchVOAServer must be embedded to have forward compatible implementations.
type UnimplementedFetchVOAServer struct {
}

func (UnimplementedFetchVOAServer) ListArticles(context.Context, *v1.ListArticlesRequest) (*v1.ListArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedFetchVOAServer) GetArticle(context.Context, *v1.GetArticleRequest) (*v1.Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedFetchVOAServer) SearchArticles(context.Context, *v1.SearchArticlesRequest) (*v1.SearchArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArticles not implemented")
}
func (UnimplementedFetchVOAServer) mustEmbedUnimplementedFetchVOAServer() {}

// UnsafeFetchVOAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchVOAServer will
// result in compilation errors.
type UnsafeFetchVOAServer interface {
	mustEmbedUnimplementedFetchVOAServer()
}

func RegisterFetchVOAServer(s grpc.ServiceRegistrar, srv FetchVOAServer) {
	s.RegisterService(&FetchVOA_ServiceDesc, srv)
}

func _FetchVOA_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchVOAServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetchnews.voa.v1.FetchVOA/ListArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchVOAServer).ListArticles(ctx, req.(*v1.ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchVOA_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchVOAServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetchnews.voa.v1.FetchVOA/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchVOAServer).GetArticle(ctx, req.(*v1.GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchVOA_SearchArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SearchArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchVOAServer).SearchArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetchnews.voa.v1.FetchVOA/SearchArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchVOAServer).SearchArticles(ctx, req.(*v1.SearchArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchVOA_ServiceDesc is the grpc.ServiceDesc for FetchVOA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchVOA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fetchnews.voa.v1.FetchVOA",
	HandlerType: (*FetchVOAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArticles",
			Handler:    _FetchVOA_ListArticles_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _FetchVOA_GetArticle_Handler,
		},
		{
			MethodName: "SearchArticles",
			Handler:    _FetchVOA_SearchArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/fetchnews/voa/v1/fetchnews.proto",
}
